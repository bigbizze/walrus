/*
Tests that an error is thrown when attempting to subscribe to a table the role can not select from
*/
select 1 from pg_create_logical_replication_slot('realtime', 'wal2json', false);
 ?column? 
----------
        1
(1 row)

create table public.notes(
    id int primary key
);
revoke select on public.notes from authenticated;
insert into realtime.subscription(subscription_id, entity, claims)
select
    seed_uuid(1),
    'public.notes',
    jsonb_build_object(
        'role', 'authenticated',
        'email', 'example@example.com',
        'sub', seed_uuid(2)::text
    );
select clear_wal();
 clear_wal 
-----------
 
(1 row)

insert into public.notes(id) values (1);
select
    rec,
    is_rls_enabled,
    subscription_ids,
    errors
from
   walrus;
          rec           | is_rls_enabled |            subscription_ids            |           errors            
------------------------+----------------+----------------------------------------+-----------------------------
 {                     +| f              | {f4539ebe-c779-5788-bbc1-2421ffaa8954} | {"Error 401: Unauthorized"}
     "type": "INSERT", +|                |                                        | 
     "table": "notes", +|                |                                        | 
     "schema": "public"+|                |                                        | 
 }                      |                |                                        | 
(1 row)

drop table public.notes;
select pg_drop_replication_slot('realtime');
 pg_drop_replication_slot 
--------------------------
 
(1 row)

truncate table realtime.subscription;
